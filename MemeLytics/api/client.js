import AsyncStorage from '@react-native-async-storage/async-storage';

const API_BASE_URL = 'http://192.168.1.18:8000';

class ApiClient {
  constructor() {
    this.baseURL = API_BASE_URL;
    this.tokenKey = 'userToken';
  }

  // -----------------------
  // –¢–æ–∫–µ–Ω
  // -----------------------
  async getToken() {
    try {
      return await AsyncStorage.getItem(this.tokenKey);
    } catch (error) {
      console.error('Error getting token:', error);
      return null;
    }
  }
async getFeaturedMemes() {
  return this.request('/feed/featured');
}
  async setToken(token) {
    try {
      await AsyncStorage.setItem(this.tokenKey, token);
    } catch (error) {
      console.error('Error saving token:', error);
    }
  }

  async removeToken() {
    try {
      await AsyncStorage.removeItem(this.tokenKey);
    } catch (error) {
      console.error('Error removing token:', error);
    }
  }

 translateError = (errorMessage) => {
  const errorTranslations = {
    // Auth errors
    "Invalid credentials": "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
    "Email already registered": "–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
    "Invalid token": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω",
    "User not found": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
    
    // Profile update errors
    "Username already taken": "–¢–∞–∫–æ–π –Ω–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç",
    "Current email is incorrect": "–¢–µ–∫—É—â–∏–π email —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ",
    "New email cannot be the same as current email": "–ù–æ–≤—ã–π email –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–∫—É—â–∏–º",
    "Email already registered": "–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
    "Current password is incorrect": "–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ",
    "New password cannot be the same as current password": "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ù–û–í–´–ô –ü–ê–†–û–õ–¨!",
    "New password must be at least 6 characters long": "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤",
    "All fields are required": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è",
    
    // File errors
    "File must be an image": "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º",
    
    // Registration errors
    "Error during registration": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
    "email already registered": "–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", 
    "username already taken": "–≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç",
    
    // Generic errors
    "Error during login": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ",
    "Error updating username": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏",
    "Error updating email": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ email",
    "Error updating password": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è",
    "Error uploading avatar": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞",
    "Error updating settings": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
    "Internal Server Error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    "Not Found": "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
    "Unauthorized": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
  };

  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const cleanErrorMessage = errorMessage.replace(/[:]/g, '').trim();
  
  // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –¢–û–ß–ù–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Å–∞–º—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏)
  if (errorTranslations[errorMessage]) {
    return errorTranslations[errorMessage];
  }

  // –ó–∞—Ç–µ–º –∏—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –æ—á–∏—â–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
  if (errorTranslations[cleanErrorMessage]) {
    return errorTranslations[cleanErrorMessage];
  }

  // –ó–∞—Ç–µ–º –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  const errorMsgLower = errorMessage.toLowerCase();
  const cleanErrorMsgLower = cleanErrorMessage.toLowerCase();
  
  for (const [key, value] of Object.entries(errorTranslations)) {
    const keyLower = key.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∏ –æ—á–∏—â–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    if (errorMsgLower.includes(keyLower) || cleanErrorMsgLower.includes(keyLower)) {
      return value;
    }
  }

  // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
  return `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${errorMessage}`;
}
  // -----------------------
  // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
  // -----------------------
async request(endpoint, options = {}) {
  const url = `${this.baseURL}${endpoint}`;
  const token = await this.getToken();

  console.log(`üåê API Request: ${options.method || 'GET'} ${url}`);
  if (options.body && !(options.body instanceof FormData)) {
    console.log('üì¶ Request body:', options.body);
  }

  const headers = {
    ...options.headers,
  };

  if (!(options.body instanceof FormData)) {
    headers['Content-Type'] = 'application/json';
  }

  if (token) {
    headers['Authorization'] = `Bearer ${token}`;
  }

  const fetchOptions = {
    method: options.method || 'GET',
    headers,
  };

  if (options.body) {
    fetchOptions.body = options.body instanceof FormData ? options.body : JSON.stringify(options.body);
  }

  try {
    const response = await fetch(url, fetchOptions);
    const text = await response.text();
    let data;
    try {
      data = JSON.parse(text);
    } catch {
      data = text;
    }

    console.log(`üì• API Response: ${response.status}`, data);

    if (!response.ok) {
      // –ï—Å–ª–∏ 401, –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω
      if (response.status === 401) {
        await this.removeToken();
      }

      let errorMessage = `HTTP error! status: ${response.status}`;
      
      // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—à–∏–±–æ–∫
      if (data && data.detail) {
        errorMessage = data.detail;
      } else if (data && data.message) {
        errorMessage = data.message;
      } else if (data && data.error) {
        errorMessage = data.error;
      } else if (typeof data === 'string' && data) {
        errorMessage = data;
      } else if (data && typeof data === 'object') {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—É—é —Å—Ç—Ä–æ–∫—É —Å –æ—à–∏–±–∫–æ–π –≤ –æ–±—ä–µ–∫—Ç–µ
        const errorString = JSON.stringify(data);
        if (errorString.includes('error') || errorString.includes('Error')) {
          errorMessage = errorString;
        }
      }

      console.error(`‚ùå API Error [${response.status}]:`, errorMessage);
      
      // –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –Ω–∞ —Ä—É—Å—Å–∫–∏–π
      const translatedError = this.translateError(errorMessage);
      throw new Error(translatedError);
    }

    return data;
  } catch (error) {
    console.error('‚ùå API Request failed:', error);
    
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë
    if (error.message && this.translateError(error.message) !== error.message) {
      throw error;
    }
    
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
    const translatedError = this.translateError(error.message);
    throw new Error(translatedError);
  }
}

  // -----------------------
  // Auth & User
  // -----------------------
  async login({ email, password }) {
    const data = await this.request('/login', { method: 'POST', body: { email, password } });
    if (data.access_token) {
      await this.setToken(data.access_token);
    }
    return data;
  }

  async register({ email, password, username, interests = [] }) {
    const data = await this.request('/register', { method: 'POST', body: { email, password, username, interests } });
    if (data.access_token) {
      await this.setToken(data.access_token);
    }
    return data;
  }

  async logout() {
    await this.removeToken();
  }

  async getCurrentUser() {
    return this.request('/users/me');
  }

  async getUserProfile(userId) {
    return this.request(`/users/${userId}`);
  }

  async getUserMemes(userId, type = 'created') {
    return this.request(`/users/${userId}/memes?type=${type}`);
  }

  // -----------------------
  // Profile updates
  // -----------------------
  async updateUsername(username) {
    return this.request('/users/update-username', { method: 'PUT', body: { username } });
  }

  async updateEmail(currentEmail, newEmail) {
    return this.request('/users/update-email', { method: 'PUT', body: { currentEmail, newEmail } });
  }

  async updatePassword(currentPassword, newPassword) {
    return this.request('/users/update-password', { method: 'PUT', body: { currentPassword, newPassword } });
  }

  async uploadAvatar(imageUri) {
    const formData = new FormData();
    const filename = imageUri.split('/').pop();
    const fileExtension = filename.split('.').pop() || 'jpg';

    formData.append('avatar', {
      uri: imageUri,
      type: `image/${fileExtension === 'jpg' ? 'jpeg' : fileExtension}`,
      name: `avatar.${fileExtension}`,
    });

    const data = await this.request('/users/upload-avatar', { method: 'POST', body: formData });

    if (data.avatar_url && !data.avatar_url.startsWith('http')) {
      data.avatar_url = `${this.baseURL}${data.avatar_url}`;
    }

    return data;
  }

  async updateSettings(settings) {
    return this.request('/users/settings', { method: 'PUT', body: settings });
  }

  // -----------------------
  // Post methods
  // -----------------------
async createPost(formData) {
  return this.request('/memes', { 
    method: 'POST', 
    body: formData 
  });
}

  async getPost(postId) {
    return this.request(`/memes/${postId}`);
  }
}

export const apiClient = new ApiClient();